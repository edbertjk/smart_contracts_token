type Prize = record {
  id : text;
  name : text;
  createdAt : nat64;
  updatedAt : opt nat64;
  point : nat64;
  amount : nat64;
};
type PrizePayload = record { name : text; point : nat64; amount : nat64 };
type Token = record {
  name : text;
  createdAt : nat64;
  uniqueCode : text;
  updatedAt : opt nat64;
  point : nat64;
};
type User = record {
  id : text;
  username : text;
  password : text;
  createdAt : nat64;
  updatedAt : opt nat64;
  points : nat64;
};
type _AzleResult = variant { Ok : Prize; Err : text };
type _AzleResult_1 = variant { Ok : Token; Err : text };
type _AzleResult_2 = variant { Ok : User; Err : text };
type _AzleResult_3 = variant { Ok : vec Prize; Err : text };
type _AzleResult_4 = variant { Ok : vec Token; Err : text };
type _AzleResult_5 = variant { Ok : vec User; Err : text };
service : () -> {
  createPrize : (PrizePayload) -> (_AzleResult);
  createToken : (text, nat64) -> (_AzleResult_1);
  createUser : (text, text) -> (_AzleResult_2);
  exchangePrize : (text, text) -> (_AzleResult);
  getAllPrize : () -> (_AzleResult_3) query;
  getAllToken : () -> (_AzleResult_4) query;
  getAllUser : () -> (_AzleResult_5) query;
  getOnceUser : (text) -> (_AzleResult_2) query;
  redeemToken : (text, text) -> (_AzleResult_2);
}